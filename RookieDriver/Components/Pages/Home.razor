@page "/"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationManager

<PageTitle>DKT practice</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    @if (IsNewUser)
    {
        @*Registation For new user*@
            <EditForm Model="@usermodel" OnValidSubmit="@CreateUser">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <MudGrid>
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardContent>
                                <MudTextField Label="Email" HelperText="Enter your email" Class="mt-3"
                                              @bind-Value="@usermodel.Email" For="@(() => usermodel.Email)" InputType="InputType.Email" />
                                <MudTextField Label="Username" HelperText="Enter your username"
                                              @bind-Value="@usermodel.Username" For="@(() => usermodel.Username)" />
                                <MudTextField Label="Password" HelperText="Enter your password" Class="mt-3"
                                              @bind-Value="@usermodel.Password" For="@(() => usermodel.Password)" InputType="InputType.Password" />
                                <MudTextField Label="Confirm Password" HelperText="Enter your password" Class="mt-3"
                                              @bind-Value="@usermodel.ConfirmPassword" For="@(() => usermodel.ConfirmPassword)" InputType="InputType.Password" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
    }
    else
    {
        <EditForm Model="@model" OnValidSubmit="@ValidateLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudGrid Spacing="2" Justify="Justify.FlexStart">
                <MudItem xs="12">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudTextField Label="Username" HelperText="Enter your username"
                                      @bind-Value="@model.Username" For="@(() => model.Username)" />
                            <MudTextField Label="Password" HelperText="Enter your password" Class="mt-3"
                                      @bind-Value="@model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                    <MudItem xs="12" sm="2">
                        <MudText>New User?</MudText>
                    </MudItem>
                <MudItem xs="12" sm="3">
                    <MudLink OnClick="@ShowRegisterUser" Color="Color.Primary" Class="ml-auto">Register here</MudLink>
                    </MudItem>
            </MudGrid>
        </EditForm>
    }    
</MudContainer>

@code{

    private LoginModel model = new LoginModel();
    private NewUser usermodel = new NewUser();

    private UserManager userManager;
    private bool IsNewUser;

    protected override void OnInitialized()
    {
        userManager = new UserManager();
    }

    private void ValidateLogin(EditContext context)
    {
        bool isLoggedIn = userManager.UserLogin(model.Username, model.Password);

        if (isLoggedIn == true)
        {
            RookieDriverContext.IsUserLoggedIn = true;
            RookieDriverContext.LoggedInUsername = model.Username;
            navigationManager.NavigateTo($"/user", forceLoad: true);
        }
    }

    private void CreateUser()
    {
        if(usermodel.Password == usermodel.ConfirmPassword)
        {
            var newuser = userManager.NewUser(usermodel.Email, usermodel.Username, usermodel.Password);
            IsNewUser = false;
        }
    }

    private void ShowRegisterUser()
    {
        IsNewUser = true;
    }

    public class LoginModel
    {
        [Required]
        public string Password { get; set; }

        [Required]
        public string Username { get; set; }
    }

    public class NewUser
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }

        [Required]
        public string ConfirmPassword { get; set; }

    }
}