@page "/"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationManager
@inject ISnackbar snackBarService

<PageTitle>DKT practice</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    @if (IsNewUser)
    {
        @*Registation For new user*@
            <EditForm Model="@usermodel" OnValidSubmit="@CreateUser">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardContent>
                                <MudTextField Label="Email" HelperText="Enter your email" Class="mt-3"
                                              @bind-Value="@usermodel.Email" For="@(() => usermodel.Email)" InputType="InputType.Email" />
                                <MudTextField Label="Username" HelperText="Enter your username"
                                              @bind-Value="@usermodel.Username" For="@(() => usermodel.Username)" />
                                <MudTextField Label="Password" HelperText="Enter your password" Class="mt-3"
                                              @bind-Value="@usermodel.Password" For="@(() => usermodel.Password)" InputType="InputType.Password" />
                                <MudTextField Label="Confirm Password" HelperText="Enter your password" Class="mt-3"
                                              @bind-Value="@usermodel.ConfirmPassword" For="@(() => usermodel.ConfirmPassword)" InputType="InputType.Password" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                <MudItem xs="12" sm="3">
                    <MudLink OnClick="@ShowLoginUser" Color="Color.Primary" Class="ml-auto">Login here</MudLink>
                </MudItem>
                </MudGrid>
            </EditForm>
    }
    else
    {
        @*Login for existing user*@
        <EditForm Model="@model" OnValidSubmit="@ValidateLogin">
            <DataAnnotationsValidator />
            <MudGrid Spacing="2" Justify="Justify.FlexStart">
                <MudItem xs="12">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudTextField Label="Username" HelperText="Enter your username"
                                      @bind-Value="@model.Username" For="@(() => model.Username)" />
                            <MudTextField Label="Password" HelperText="Enter your password" Class="mt-3"
                                      @bind-Value="@model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                    <MudItem xs="12" sm="2">
                        <MudText>New User?</MudText>
                    </MudItem>
                <MudItem xs="12" sm="3">
                    <MudLink OnClick="@ShowRegisterUser" Color="Color.Primary" Class="ml-auto">Register here</MudLink>
                    </MudItem>
            </MudGrid>
        </EditForm>
    }    
</MudContainer>

@code{

    // Model to get login info
    private LoginModel model = new LoginModel();

    // Model to get user info 
    private NewUser usermodel = new NewUser();

    // Manager to read, add new users
    private UserManager userManager;

    private bool IsNewUser;

    protected override void OnInitialized()
    {
        RookieDriverContext.InTutorial = false;
        userManager = new UserManager();
    }

    /// <summary>
    /// Validation to check for login.
    /// </summary>
    /// <param name="context"></param>
    private void ValidateLogin(EditContext context)
    {
        bool isLoggedIn = userManager.UserLogin(model.Username, model.Password);

        if (isLoggedIn == true)
        {
            RookieDriverContext.IsUserLoggedIn = true;
            RookieDriverContext.LoggedInUsername = model.Username;

            // Redirect to User main page
            navigationManager.NavigateTo("/user", forceLoad: true);
        }
        else
        {
            // Send out the notification
            snackBarService.Add("Incorrect login credentials", Severity.Error, ops => 
            { 
                ops.ActionColor = Color.Error; 
                ops.ActionVariant = Variant.Filled;
                ops.SnackbarVariant = Variant.Filled;
            });
            model = new();
        }
    }

    /// <summary>
    /// Creating new User upon successful registration
    /// </summary>
    private void CreateUser()
    {
        // Attempting to create a new user
        var newuser = userManager.NewUser(usermodel.Email, usermodel.Username, usermodel.Password);

        if(newuser is not null)
        {
            // Send notification on successfull registration
            snackBarService.Add("User created, Login to continue.", Severity.Success, ops =>
            {
                ops.ActionVariant = Variant.Filled;
                ops.SnackbarVariant = Variant.Filled;
            });

            usermodel = new();
            IsNewUser = false;
        }
        else
        {
            IsNewUser = true;
            // Send notification on unsuccessfull registration
            snackBarService.Add("User was not created, Try again.", Severity.Error, ops =>
            {
                ops.ActionVariant = Variant.Filled;
                ops.SnackbarVariant = Variant.Filled;
            });
        }
    }

    /// <summary>
    /// Show registraion page.
    /// </summary>
    private void ShowRegisterUser()
    {
        IsNewUser = true;
    }

    /// <summary>
    /// Show login page
    /// </summary>
    private void ShowLoginUser()
    {
        IsNewUser = false;
        usermodel = new();
    }

    /// <summary>
    /// Model to get login info
    /// </summary>
    public class LoginModel
    {
        [Required]
        public string Password { get; set; }

        [Required]
        public string Username { get; set; }
    }

    /// <summary>
    /// Model to get User info
    /// </summary>
    public class NewUser
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [MinLength(3, ErrorMessage = "Username must be atleast 3 characters long")]
        [MaxLength(20, ErrorMessage = "Username must not be more than 20 characters")]
        [RegularExpression("[^\\s]{3,20}$", ErrorMessage = "Username must not have any whitespaces")]
        public string Username { get; set; }

        [Required]
        [MinLength(3, ErrorMessage = "Password must be atleast 3 characters long")]
        [MaxLength(20, ErrorMessage = "Password must not be more than 20 characters")]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,20}$",
            ErrorMessage = "Password must have be at least one digit, have one lowercase character, one uppercase character, and one special character.")]
        public string Password { get; set; }

        [Required(ErrorMessage ="Confirm Password is required!")]
        [Compare("Password",ErrorMessage ="Passwords does not match!")]
        public string ConfirmPassword { get; set; }

    }
}